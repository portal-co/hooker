{"mappings":";;AAIA,wBAAwB,EACtB,KAAc,EACd,OAAkB,EAClB,OAAkB,EAClB,iBAAsC,EACtC,kBAAuC,EACvC,UAAwB,GACzB,EAAE;IACD,KAAK,CAAC,EAAE,aAAa,CAAC;IACtB,OAAO,CAAC,EAAE,eAAe,CAAC;IAC1B,OAAO,CAAC,EAAE,eAAe,CAAC;IAC1B,iBAAiB,CAAC,EAAE,yBAAyB,CAAC;IAC9C,kBAAkB,CAAC,EAAE,OAAO,SAAS,SAAS,CAAC;IAC/C,UAAU,CAAC,EAAE;QAAE,KAAK,EAAE,aAAa,CAAA;KAAE,CAAC;CACvC,GAAG;IAAE,KAAK,EAAE,OAAO,KAAK,CAAC;IAAC,GAAG,EAAE,OAAO,CAAC,GAAG,EAAE,MAAM,MAAM,CAAC,CAAA;CAAE,CAkC3D;AAED,qBAAqB,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,OAAO,CAAC,GAAG,EAAC,MAAM,MAAM,CAAC,EAAE,EAAC,iBAAsC,EAAC,EAAE;IAAC,iBAAiB,CAAC,EAAE,yBAAyB,CAAA;CAAC,QAExJ","sources":["packages/sealant/packages/sealant/index.ts","packages/sealant/index.ts"],"sourcesContent":[null,"import { _Proxy, _Reflect } from \"@portal-solutions/hooker-core\";\nimport { _WeakMap, _WeakMap_prototype } from \"@portal-solutions/hooker-snap\";\n\nconst globalThis_ = globalThis;\nexport function sealant({\n  Proxy = _Proxy,\n  Reflect = _Reflect,\n  WeakMap = _WeakMap,\n  WeakMap_prototype = _WeakMap_prototype,\n  Function_prototype = Function.prototype,\n  globalThis = globalThis_,\n}: {\n  Proxy?: typeof _Proxy;\n  Reflect?: typeof _Reflect;\n  WeakMap?: typeof _WeakMap;\n  WeakMap_prototype?: typeof _WeakMap_prototype;\n  Function_prototype?: typeof Function.prototype;\n  globalThis?: { Proxy: typeof _Proxy };\n}): { Proxy: typeof Proxy; map: WeakMap<any, () => string> } {\n  const map = new WeakMap();\n  const obj = {\n    Proxy: new Proxy(globalThis.Proxy, {\n      construct(obj, args, self) {\n        const a = Reflect.construct(obj, args, self);\n        if (args.length && WeakMap_prototype.has(map, args[0]))\n          WeakMap_prototype.set(map, a, WeakMap_prototype.get(map, args[0]));\n        return a;\n      },\n    }),\n  };\n  Function_prototype.bind = new Proxy(Function_prototype.bind, {\n    apply(target, self, args) {\n      const a = Reflect.apply(target, self, args);\n      if (WeakMap_prototype.has(map, self))\n        WeakMap_prototype.set(map, a, WeakMap_prototype.get(map, self));\n      return a;\n    },\n  });\n  Function_prototype.toString = new Proxy(Function_prototype.toString, {\n    apply(target, self, args) {\n      if (WeakMap_prototype.has(map, self)) {\n        return WeakMap_prototype.get(map, self)();\n      } else {\n        return Reflect.apply(target, self, args);\n      }\n    },\n  });\n  Object.assign(globalThis, obj);\n  return {\n    ...obj,\n    map,\n  };\n}\n\nexport function seal(func: any, map: WeakMap<any,() => string>, {WeakMap_prototype = _WeakMap_prototype}: {WeakMap_prototype?: typeof _WeakMap_prototype}){\n    WeakMap_prototype.set(map,func,() => `function ${func.name} { [native code] }`)\n}"],"names":[],"version":3,"file":"index.d.ts.map"}