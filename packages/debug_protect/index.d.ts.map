{"mappings":";AA0BA,qBAAqB,EACnB,KAAc,EACd,OAAkB,EAClB,OAAkB,EAClB,OAAe,GAChB,GAAE;IACD,KAAK,CAAC,EAAE,aAAa,CAAC;IACtB,OAAO,CAAC,EAAE,eAAe,CAAC;IAC1B,OAAO,CAAC,EAAE;QAAE,GAAG,EAAE,QAAQ,CAAA;KAAE,CAAC;IAC5B,OAAO,CAAC,EAAE,OAAO,CAAC;CACd,QAeL","sources":["packages/debug_protect/packages/debug_protect/index.ts","packages/debug_protect/index.ts"],"sourcesContent":[null,"import { _Proxy, _Reflect, hook } from \"@portal-solutions/hooker-core\";\n// const { create } = Object;\nconst bobj = { id: true };\nfunction cleanseDevTools(\n  a: any,\n  {\n    Proxy = _Proxy,\n    Reflect = _Reflect,\n  }: { Proxy?: typeof _Proxy; Reflect?: typeof _Reflect } = {}\n): any {\n  if (typeof a === \"object\" || typeof a === \"function\") {\n    for (const banned in bobj)\n      if (banned in a) {\n        a = new Proxy(a, {\n          get: (o, k, r) => {\n            if (k in bobj) return undefined;\n            return Reflect.get(o, k, r);\n          },\n          has: (o, k) => !(k in bobj) && Reflect.has(o, k),\n        });\n        break;\n      }\n  }\n  return a;\n}\nconst _console: typeof console = console;\nexport function init({\n  Proxy = _Proxy,\n  Reflect = _Reflect,\n  console = _console,\n  attempt = false,\n}: {\n  Proxy?: typeof _Proxy;\n  Reflect?: typeof _Reflect;\n  console?: { log: Function };\n  attempt?: boolean;\n} = {}) {\n  for (const key of [\"log\"])\n    hook(\n      console as any,\n      key,\n      (Reflect) => ({\n        apply: (o, t, a) => {\n          for (let i = 0; i < a.length; i++) {\n            a[i] = cleanseDevTools(a[i], { Proxy, Reflect });\n          }\n          return Reflect.apply(o, t, a);\n        },\n      }),\n      { Proxy, Reflect, attempt }\n    );\n}\n"],"names":[],"version":3,"file":"index.d.ts.map"}