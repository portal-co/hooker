export declare const _DataView: typeof DataView;
export declare const _DataView_prototype: import("./index.ts").ProtoSnapshot<DataView<ArrayBufferLike>>;
export declare const _DataView_quick_prototype: import("./index.ts").ProtoSnapshot<DataView<ArrayBufferLike>>;
export declare const _ArrayBuffer: typeof ArrayBuffer;
export declare const _ArrayBuffer_prototype: import("./index.ts").ProtoSnapshot<ArrayBuffer>;
export declare const _ArrayBuffer_quick_prototype: import("./index.ts").ProtoSnapshot<ArrayBuffer>;
export declare const _Uint8Array: typeof Uint8Array;
export declare const _Uint8Array_prototype: import("./index.ts").ProtoSnapshot<Uint8Array<ArrayBufferLike>>;
export declare const _Uint8Array_quick_prototype: import("./index.ts").ProtoSnapshot<Uint8Array<ArrayBufferLike>>;
export declare const _Uint16Array: typeof Uint16Array;
export declare const _Uint16Array_prototype: import("./index.ts").ProtoSnapshot<Uint16Array<ArrayBufferLike>>;
export declare const _Uint16Array_quick_prototype: import("./index.ts").ProtoSnapshot<Uint16Array<ArrayBufferLike>>;
export declare const _Uint32Array: typeof Uint32Array;
export declare const _Uint32Array_prototype: import("./index.ts").ProtoSnapshot<Uint32Array<ArrayBufferLike>>;
export declare const _Uint32Array_quick_prototype: import("./index.ts").ProtoSnapshot<Uint32Array<ArrayBufferLike>>;
export declare const _Int8Array: typeof Int8Array;
export declare const _Int8Array_prototype: import("./index.ts").ProtoSnapshot<Int8Array<ArrayBufferLike>>;
export declare const _Int8Array_quick_prototype: import("./index.ts").ProtoSnapshot<Int8Array<ArrayBufferLike>>;
export declare const _Int16Array: typeof Int16Array;
export declare const _Int16Array_prototype: import("./index.ts").ProtoSnapshot<Int16Array<ArrayBufferLike>>;
export declare const _Int16Array_quick_prototype: import("./index.ts").ProtoSnapshot<Int16Array<ArrayBufferLike>>;
export declare const _Int32Array: typeof Int32Array;
export declare const _Int32Array_prototype: import("./index.ts").ProtoSnapshot<Int32Array<ArrayBufferLike>>;
export declare const _Int32Array_quick_prototype: import("./index.ts").ProtoSnapshot<Int32Array<ArrayBufferLike>>;
export declare const _Float32Array: typeof Float32Array;
export declare const _Float32Array_prototype: import("./index.ts").ProtoSnapshot<Float32Array<ArrayBufferLike>>;
export declare const _Float32Array_quick_prototype: import("./index.ts").ProtoSnapshot<Float32Array<ArrayBufferLike>>;
export declare const _Float64Array: typeof Float64Array;
export declare const _Float64Array_prototype: import("./index.ts").ProtoSnapshot<Float64Array<ArrayBufferLike>>;
export declare const _Float64Array_quick_prototype: import("./index.ts").ProtoSnapshot<Float64Array<ArrayBufferLike>>;
export declare const _WeakMap: typeof WeakMap;
export declare const _WeakMap_prototype: import("./index.ts").ProtoSnapshot<WeakMap<WeakKey, any>>;
export declare const _WeakMap_quick_prototype: import("./index.ts").ProtoSnapshot<WeakMap<WeakKey, any>>;
export declare const _String: typeof String;
export declare const _String_prototype: import("./index.ts").ProtoSnapshot<String>;
export declare const _String_quick_prototype: import("./index.ts").ProtoSnapshot<String>;
export declare const _String_props: {
    prototype: String;
    fromCharCode(...codes: number[]): string;
    fromCodePoint(...codePoints: number[]): string;
    raw(template: {
        raw: readonly string[] | ArrayLike<string>;
    }, ...substitutions: any[]): string;
};
export declare const _Array: typeof Array;
export declare const _Array_prototype: (import("./index.ts").SnapshotOutput<any> | {
    get(self: any[]): any;
    set(self: any[], value: any): any;
})[];
export declare const _Array_quick_prototype: (import("./index.ts").SnapshotOutput<any> | {
    get(self: any[]): any;
    set(self: any[], value: any): any;
})[];
export declare const _Function: typeof Function;
export declare const _Function_prototype: import("./index.ts").ProtoSnapshot<Function>;
export declare const _Function_quick_prototype: import("./index.ts").ProtoSnapshot<Function>;
export declare const _Math: typeof Math;
export declare const _Math_props: {
    E: number;
    LN10: number;
    LN2: number;
    LOG2E: number;
    LOG10E: number;
    PI: number;
    SQRT1_2: number;
    SQRT2: number;
    abs(x: number): number;
    acos(x: number): number;
    asin(x: number): number;
    atan(x: number): number;
    atan2(y: number, x: number): number;
    ceil(x: number): number;
    cos(x: number): number;
    exp(x: number): number;
    floor(x: number): number;
    log(x: number): number;
    max(...values: number[]): number;
    min(...values: number[]): number;
    pow(x: number, y: number): number;
    random(): number;
    round(x: number): number;
    sin(x: number): number;
    sqrt(x: number): number;
    tan(x: number): number;
    clz32(x: number): number;
    imul(x: number, y: number): number;
    sign(x: number): number;
    log10(x: number): number;
    log2(x: number): number;
    log1p(x: number): number;
    expm1(x: number): number;
    cosh(x: number): number;
    sinh(x: number): number;
    tanh(x: number): number;
    acosh(x: number): number;
    asinh(x: number): number;
    atanh(x: number): number;
    hypot(...values: number[]): number;
    trunc(x: number): number;
    fround(x: number): number;
    cbrt(x: number): number;
    f16round(x: number): number;
    [Symbol.toStringTag]: string;
};
