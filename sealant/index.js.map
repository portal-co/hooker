{"mappings":";;;;;AAGA,MAAM,oCAAc;AACb,SAAS,0CAAQ,SACtB,QAAQ,CAAA,GAAA,aAAK,YACb,UAAU,CAAA,GAAA,eAAO,YACjB,UAAU,CAAA,GAAA,eAAO,sBACjB,oBAAoB,CAAA,GAAA,yBAAiB,uBACrC,qBAAqB,SAAS,SAAS,EACvC,YAAA,cAAa,iCAAW,EAQzB;IACC,MAAM,MAAM,IAAI;IAChB,MAAM,MAAM;QACV,OAAO,IAAI,MAAM,YAAW,KAAK,EAAE;YACjC,WAAU,GAAG,EAAE,IAAI,EAAE,IAAI;gBACvB,MAAM,IAAI,QAAQ,SAAS,CAAC,KAAK,MAAM;gBACvC,IAAI,KAAK,MAAM,IAAI,kBAAkB,GAAG,CAAC,KAAK,IAAI,CAAC,EAAE,GACnD,kBAAkB,GAAG,CAAC,KAAK,GAAG,kBAAkB,GAAG,CAAC,KAAK,IAAI,CAAC,EAAE;gBAClE,OAAO;YACT;QACF;IACF;IACA,mBAAmB,IAAI,GAAG,IAAI,MAAM,mBAAmB,IAAI,EAAE;QAC3D,OAAM,MAAM,EAAE,IAAI,EAAE,IAAI;YACtB,MAAM,IAAI,QAAQ,KAAK,CAAC,QAAQ,MAAM;YACtC,IAAI,kBAAkB,GAAG,CAAC,KAAK,OAC7B,kBAAkB,GAAG,CAAC,KAAK,GAAG,kBAAkB,GAAG,CAAC,KAAK;YAC3D,OAAO;QACT;IACF;IACA,mBAAmB,QAAQ,GAAG,IAAI,MAAM,mBAAmB,QAAQ,EAAE;QACnE,OAAM,MAAM,EAAE,IAAI,EAAE,IAAI;YACtB,IAAI,kBAAkB,GAAG,CAAC,KAAK,OAC7B,OAAO,kBAAkB,GAAG,CAAC,KAAK;iBAElC,OAAO,QAAQ,KAAK,CAAC,QAAQ,MAAM;QAEvC;IACF;IACA,OAAO,MAAM,CAAC,aAAY;IAC1B,OAAO;QACL,GAAG,GAAG;aACN;IACF;AACF;AAEO,SAAS,0CAAK,IAAS,EAAE,GAA8B,EAAE,qBAAC,oBAAoB,CAAA,GAAA,yBAAiB,GAAmD;IACrJ,kBAAkB,GAAG,CAAC,KAAI,MAAK,IAAM,CAAC,SAAS,EAAE,KAAK,IAAI,CAAC,kBAAkB,CAAC;AAClF","sources":["sealant/index.ts"],"sourcesContent":["import { _Proxy, _Reflect } from \"@portal-solutions/hooker-core\";\nimport { _WeakMap, _WeakMap_prototype } from \"@portal-solutions/hooker-snap\";\n\nconst globalThis_ = globalThis;\nexport function sealant({\n  Proxy = _Proxy,\n  Reflect = _Reflect,\n  WeakMap = _WeakMap,\n  WeakMap_prototype = _WeakMap_prototype,\n  Function_prototype = Function.prototype,\n  globalThis = globalThis_,\n}: {\n  Proxy?: typeof _Proxy;\n  Reflect?: typeof _Reflect;\n  WeakMap?: typeof _WeakMap;\n  WeakMap_prototype?: typeof _WeakMap_prototype;\n  Function_prototype?: typeof Function.prototype;\n  globalThis?: { Proxy: typeof _Proxy };\n}): { Proxy: typeof Proxy; map: WeakMap<any, () => string> } {\n  const map = new WeakMap();\n  const obj = {\n    Proxy: new Proxy(globalThis.Proxy, {\n      construct(obj, args, self) {\n        const a = Reflect.construct(obj, args, self);\n        if (args.length && WeakMap_prototype.has(map, args[0]))\n          WeakMap_prototype.set(map, a, WeakMap_prototype.get(map, args[0]));\n        return a;\n      },\n    }),\n  };\n  Function_prototype.bind = new Proxy(Function_prototype.bind, {\n    apply(target, self, args) {\n      const a = Reflect.apply(target, self, args);\n      if (WeakMap_prototype.has(map, self))\n        WeakMap_prototype.set(map, a, WeakMap_prototype.get(map, self));\n      return a;\n    },\n  });\n  Function_prototype.toString = new Proxy(Function_prototype.toString, {\n    apply(target, self, args) {\n      if (WeakMap_prototype.has(map, self)) {\n        return WeakMap_prototype.get(map, self)();\n      } else {\n        return Reflect.apply(target, self, args);\n      }\n    },\n  });\n  Object.assign(globalThis, obj);\n  return {\n    ...obj,\n    map,\n  };\n}\n\nexport function seal(func: any, map: WeakMap<any,() => string>, {WeakMap_prototype = _WeakMap_prototype}: {WeakMap_prototype?: typeof _WeakMap_prototype}){\n    WeakMap_prototype.set(map,func,() => `function ${func.name} { [native code] }`)\n}"],"names":[],"version":3,"file":"index.js.map"}